







收藏
查看我的收藏



0
有用+1
已投票



0





























树
（数据结构名词）
编辑
锁定



本词条由“科普中国”百科科学词条编写与应用工作项目
审核
。



树状图是一种数据结构，它是由n（n>=1）个有限节点组成一个具有层次关系的集合。把它叫做“树”是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。它具有以下的特点：每个节点有零个或多个子节点；没有父节点的节点称为根节点；每一个非根节点有且只有一个父节点；除了根节点外，每个子节点可以分为多个不相交的子树；[1] 





中文名

树


外文名

tree

数据结构

基本数据结构的一种




目录



1
定义


2
相关术语


3
种类


4
深度


5
表示方法


▪
图像表达法


▪
符号表达法


▪
遍历表达法


6
其他


7
父节点表示法


▪
存储结构


▪
基本操作


▪
构造空树


▪
构造树


▪
判断树是否为空


▪
获取树的深度


▪
获取第i个节点的值


▪
改变节点的值


▪
获取节点的父节点


▪
获取节点的最左孩子节点


▪
获取节点的右兄弟节点


▪
输出树


▪
向树中插入另一棵树


▪
删除子树


▪
层序遍历树


8
孩子链表表示法










树定义






树(7张)






树（tree）是包含n（n>0）个结点的有穷集，其中：
（1）每个元素称为结点（node）；
（2）有一个特定的结点被称为根结点或树根（root）。
（3）除根结点之外的其余数据元素被分为m（m≥0）个互不相交的集合T1，T2，……Tm-1，其中每一个集合Ti（1<=i<=m）本身也是一棵树，被称作原树的子树（subtree）。
树也可以这样定义：树是由根结点和若干颗子树构成的。树是由一个集合以及在该集合上定义的一种关系构成的。集合中的元素称为树的结点，所定义的关系称为父子关系。父子关系在树的结点之间建立了一个层次结构。在这种层次结构中有一个结点具有特殊的地位，这个结点称为该树的根结点，或称为树根。
我们可以形式地给出树的递归定义如下:
单个结点是一棵树，树根就是该结点本身。
设T1,T2,..,Tk是树，它们的根结点分别为n1,n2,..,nk。用一个新结点n作为n1,n2,..,nk的父亲，则得到一棵新树，结点n就是新树的根。我们称n1,n2,..,nk为一组兄弟结点，它们都是结点n的子结点。我们还称T1,T2,..,Tk为结点n的子树。
空集合也是树，称为空树。空树中没有结点。




树相关术语

节点的度：一个节点含有的子树的个数称为该节点的度；
叶节点或终端节点：度为0的节点称为叶节点；
非终端节点或分支节点：度不为0的节点；
双亲节点或父节点：若一个节点含有子节点，则这个节点称为其子节点的父节点；
孩子节点或子节点：一个节点含有的子树的根节点称为该节点的子节点；
兄弟节点：具有相同父节点的节点互称为兄弟节点；
树的度：一棵树中，最大的节点的度称为树的度；
节点的层次：从根开始定义起，根为第1层，根的子节点为第2层，以此类推；
树的高度或深度：树中节点的最大层次；
堂兄弟节点：双亲在同一层的节点互为堂兄弟；
节点的祖先：从根到该节点所经分支上的所有节点；
子孙：以某节点为根的子树中任一节点都称为该节点的子孙。
森林：由m（m>=0）棵互不相交的树的集合称为森林；




树种类

无序树：树中任意节点的子结点之间没有顺序关系，这种树称为无序树,也称为自由树;
有序树：树中任意节点的子结点之间有顺序关系，这种树称为有序树；
二叉树：每个节点最多含有两个子树的树称为二叉树；
完全二叉树
满二叉树
霍夫曼树：带权路径最短的二叉树称为哈夫曼树或最优二叉树；




树深度

定义一棵树的根结点层次为1，其他节点的层次是其父结点层次加1。一棵树中所有结点的层次的最大值称为这棵树的深度。




树表示方法







树图像表达法

树的表示方法有很多种，最常用的是图像表示法。
一下是一个普通的树（非二叉树）：










树符号表达法

用括号先将根结点放入一对圆括号中，然后把它的子树由左至右的顺序放入括号中，而对子树也采用同样的方法处理；同层子树与它的根结点用圆括号括起来，同层子树之间用逗号隔开，最后用闭括号括起来。如前文树形表示法可以表示为：（1（2（5（9，10）），3（6，7），4（8）））





树遍历表达法






遍历表达法有3种方法：先序遍历、中序遍历、后序遍历[2] 

例如右图：
其先序遍历为ABDECF
其中序遍历为DBEAFC
其后序遍历为DEBFCA
具体请参照参考资料




树其他

关于二叉树的其他知识请参照参考资料。




树父节点表示法







树存储结构

/* 树节点的定义 */
#define MAX_TREE_SIZE 100

typedef struct{
    TElemType data;
    int parent; /* 父节点位置域 */
} PTNode;

typedef struct{
    PTNode nodes[MAX_TREE_SIZE];
    int n; /* 节点数 */
} PTree;






树基本操作

设已有链队列类型LinkQueue的定义及基本操作（参见队列）。[3] 






树构造空树

清空或销毁一个树也是同样的操作
void ClearTree(PTree *T){
    T->n = 0;
}






树构造树

void CreateTree(PTree *T){
    LinkQueue q;
    QElemType p,qq;
    int i=1,j,l;
    char c[MAX_TREE_SIZE]; /* 临时存放孩子节点数组 */ 
    InitQueue(&q); /* 初始化队列 */
    printf("请输入根节点(字符型，空格为空): ");
    scanf("%c%*c",&T->nodes[0].data); /* 根节点序号为0，%*c吃掉回车符 */
    if(T->nodes[0].data!=Nil) /* 非空树 */  {
        T->nodes[0].parent=-1; /* 根节点无父节点 */
        qq.name=T->nodes[0].data; 
        qq.num=0;
        EnQueue(&q,qq); /* 入队此节点 */
        while(i<MAX_TREE_SIZE&&!QueueEmpty(q)) /* 数组未满且队不空 */    {
            DeQueue(&q,&qq); /* 节点加入队列 */
            printf("请按长幼顺序输入节点%c的所有孩子: ",qq.name);
            gets(c);
            l=strlen(c);
            for(j=0;j<l;j++){
                T->nodes[i].data=c[j];
                T->nodes[i].parent=qq.num;
                p.name=c[j]; 
                p.num=i;
                EnQueue(&q,p); /* 入队此节点 */
                i++;
              }
          }
          if(i>MAX_TREE_SIZE){
              printf("节点数超过数组容量\n");
              exit(OVERFLOW);
          }
          T->n=i;
      }
      else
          T->n=0;
 }






树判断树是否为空

Status TreeEmpty(PTree *T){
    /* 初始条件：树T存在。操作结果：若T为空树，则返回TRUE，否则返回FALSE */  
    return T->n==0;
}






树获取树的深度

int TreeDepth(PTree *T){
    /* 初始条件：树T存在。操作结果：返回T的深度 */
    int k,m,def,max=0;
    for(k=0;k<T->n;++k){
        def=1; /* 初始化本节点的深度 */
        m=T->nodes[k].parent;
        while(m!=-1){
            m=T->nodes[m].parent;
            def++;
        }
        if(max<def)
            max=def;
    }
    return max; /* 最大深度 */
}
获取根节点
TElemType Root(PTree *T){
    /* 初始条件：树T存在。操作结果：返回T的根 */
    int i;
    for(i=0;i<T->n;i++)
      if(T->nodes[i].parent<0)
        return T->nodes[i].data;
    return Nil;
}






树获取第i个节点的值

TElemType Value(PTree *T,int i){
    /* 初始条件：树T存在，i是树T中节点的序号。操作结果：返回第i个节点的值 */
    if(i<T->n)
        return T->nodes[i].data;
    else
        return Nil;
}






树改变节点的值

[4] 

Status Assign(PTree *T,TElemType cur_e,TElemType value){ /* 初始条件：树T存在，cur_e是树T中节点的值。操作结果：改cur_e为value */  int j;  for(j=0;j<T->n;j++)  {    if(T->nodes[j].data==cur_e)    {      T->nodes[j].data=value;      return OK;    }  }  return ERROR;}






树获取节点的父节点

TElemType Parent(PTree *T,TElemType cur_e){ /* 初始条件：树T存在，cur_e是T中某个节点 */  /* 操作结果：若cur_e是T的非根节点，则返回它的父节点，否则函数值为"空"*/  int j;  for(j=1;j<T->n;j++) /* 根节点序号为0 */    if(T->nodes[j].data==cur_e)      return T->nodes[T->nodes[j].parent].data;  return Nil;}






树获取节点的最左孩子节点

TElemType LeftChild(PTree *T,TElemType cur_e){ /* 初始条件：树T存在，cur_e是T中某个节点 */  /* 操作结果：若cur_e是T的非叶子节点，则返回它的最左孩子，否则返回"空"*/  int i,j;  for(i=0;i<T->n;i++)    if(T->nodes[i].data==cur_e) /* 找到cur_e，其序号为i */      break;  for(j=i+1;j<T->n;j++) /* 根据树的构造函数，孩子的序号>其父节点的序号 */    if(T->nodes[j].parent==i) /* 根据树的构造函数，最左孩子(长子)的序号<其它孩子的序号 */      return T->nodes[j].data;  return Nil;}






树获取节点的右兄弟节点

TElemType RightSibling(PTree *T,TElemType cur_e){ /* 初始条件：树T存在，cur_e是T中某个节点 */  /* 操作结果：若cur_e有右(下一个)兄弟，则返回它的右兄弟，否则返回"空"*/  int i;  for(i=0;i<T->n;i++)    if(T->nodes[i].data==cur_e) /* 找到cur_e，其序号为i */      break;  if(T->nodes[i+1].parent==T->nodes[i].parent)  /* 根据树的构造函数，若cur_e有右兄弟的话则右兄弟紧接其后 */    return T->nodes[i+1].data;  return Nil;}






树输出树

void Print(PTree *T){ /* 输出树T。加 */  int i;  printf("节点个数=%d\n",T->n);  printf(" 节点 父节点\n");  for(i=0;i<T->n;i++)  {    printf("    %c",Value(T,i)); /* 节点 */    if(T->nodes[i].parent>=0) /* 有父节点 */      printf("    %c",Value(T,T->nodes[i].parent)); /* 父节点 */    printf("\n");  }}






树向树中插入另一棵树

Status InsertChild(PTree *T,TElemType p,int i,PTree c){ /* 初始条件：树T存在，p是T中某个节点，1≤i≤p所指节点的度+1，非空树c与T不相交 */  /* 操作结果：插入c为T中p节点的第i棵子树 */  int j,k,l,f=1,n=0; /* 设交换标志f的初值为1，p的孩子数n的初值为0 */  PTNode t;  if(!TreeEmpty(T)) /* T不空 */  {    for(j=0;j<T->n;j++) /* 在T中找p的序号 */      if(T->nodes[j].data==p) /* p的序号为j */        break;    l=j+1; /* 如果c是p的第1棵子树，则插在j+1处 */    if(i>1) /* c不是p的第1棵子树 */    {      for(k=j+1;k<T->n;k++) /* 从j+1开始找p的前i-1个孩子 */        if(T->nodes[k].parent==j) /* 当前节点是p的孩子 */        {          n++; /* 孩子数加1 */          if(n==i-1) /* 找到p的第i-1个孩子，其序号为k1 */            break;        }      l=k+1; /* c插在k+1处 */    } /* p的序号为j，c插在l处 */    if(l<T->n) /* 插入点l不在最后 */      for(k=T->n-1;k>=l;k--) /* 依次将序号l以后的节点向后移c.n个位置 */      {        T->nodes[k+c.n]=T->nodes[k];        if(T->nodes[k].parent>=l)          T->nodes[k+c.n].parent+=c.n;      }    for(k=0;k<c.n;k++)    {      T->nodes[l+k].data=c.nodes[k].data; /* 依次将树c的所有节点插于此处 */      T->nodes[l+k].parent=c.nodes[k].parent+l;    }    T->nodes[l].parent=j; /* 树c的根节点的父节点为p */    T->n+=c.n; /* 树T的节点数加c.n个 */    while(f)    { /* 从插入点之后，将节点仍按层序排列 */      f=0; /* 交换标志置0 */      for(j=l;j<T->n-1;j++)        if(T->nodes[j].parent>T->nodes[j+1].parent)        {/* 如果节点j的父节点排在节点j+1的父节点之后（树没有按层序排列），交换两节点*/          t=T->nodes[j];          T->nodes[j]=T->nodes[j+1];          T->nodes[j+1]=t;          f=1; /* 交换标志置1 */          for(k=j;k<T->n;k++) /* 改变父节点序号 */            if(T->nodes[k].parent==j)              T->nodes[k].parent++; /* 父节点序号改为j+1 */            else if(T->nodes[k].parent==j+1)              T->nodes[k].parent--; /* 父节点序号改为j */        }    }    return OK;  }  else /* 树T不存在 */    return ERROR;}






树删除子树

Status deleted[MAX_TREE_SIZE+1]; /* 删除标志数组(全局量) */void DeleteChild(PTree *T,TElemType p,int i){ /* 初始条件：树T存在，p是T中某个节点，1≤i≤p所指节点的度 */  /* 操作结果：删除T中节点p的第i棵子树 */  int j,k,n=0;  LinkQueue q;  QElemType pq,qq;  for(j=0;j<=T->n;j++)    deleted[j]=0; /* 置初值为0(不删除标记) */  pq.name='a'; /* 此成员不用 */  InitQueue(&q); /* 初始化队列 */  for(j=0;j<T->n;j++)    if(T->nodes[j].data==p)      break; /* j为节点p的序号 */  for(k=j+1;k<T->n;k++)  {    if(T->nodes[k].parent==j)      n++;    if(n==i)      break; /* k为p的第i棵子树节点的序号 */  }  if(k<T->n) /* p的第i棵子树节点存在 */  {    n=0;    pq.num=k;    deleted[k]=1; /* 置删除标记 */    n++;    EnQueue(&q,pq);    while(!QueueEmpty(q))    {      DeQueue(&q,&qq);      for(j=qq.num+1;j<T->n;j++)        if(T->nodes[j].parent==qq.num)        {          pq.num=j;          deleted[j]=1; /* 置删除标记 */          n++;          EnQueue(&q,pq);        }    }    for(j=0;j<T->n;j++)      if(deleted[j]==1)      {        for(k=j+1;k<=T->n;k++)        {          deleted[k-1]=deleted[k];          T->nodes[k-1]=T->nodes[k];          if(T->nodes[k].parent>j)            T->nodes[k-1].parent--;        }        j--;      }    T->n-=n; /* n为待删除节点数 */  }}






树层序遍历树

void TraverseTree(PTree *T,void(*Visit)(TElemType)){ /* 初始条件：二叉树T存在,Visit是对节点操作的应用函数 */  /* 操作结果：层序遍历树T,对每个节点调用函数Visit一次且仅一次 */  int i;  for(i=0;i<T->n;i++)    Visit(T->nodes[i].data);  printf("\n");}






树孩子链表表示法

存储结构[5] 

/*树的孩子链表存储表示*/typedef struct CTNode { // 孩子节点   int child;   struct CTNode *next;} *ChildPtr;typedef struct {   ElemType data； // 节点的数据元素   ChildPtr firstchild； // 孩子链表头指针} CTBox;typedef struct {   CTBox nodes[MAX_TREE_SIZE]；  int n, r； // 节点数和根节点的位置} CTree;




词条图册
更多图册









参考资料



1.
  
严蔚敏．数据结构（C语言版）：清华大学出版社，1997-4-1
2.
  
先序遍历 
．百度百科-先序遍历[引用日期2014-10-17]
3.
  
李传湘;树映射原理[J];数学物理学报;1984年01期

4.
  
李传湘;INFORMATION FLOW OF TREE (1) Tree Flow Theorems[J];数学物理学报;1981年02期

5.
  
李传湘;树图组合向量集结构定理[J];计算机学报;1980年04期




词条标签：


植物





